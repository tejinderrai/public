@inject IConfiguration configuration
@inject NotificationService NotificationService
@inject DialogService DialogService
@using Azure.Storage.Sas;
@using Azure.Storage;
@using Radzen
@using Radzen.Blazor
@using Azure.AI.Vision.ImageAnalysis
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure
@using Data

<div class="mt-2">
    <RadzenDataGrid Data="@enumerableFiles" TItem="AzureBlobFile" CssClass="thead-light" EmptyText="No files found.">
        <Columns>
            <RadzenDataGridColumn TItem="AzureBlobFile" Property="FileName" Title="File Name"  />
            <RadzenDataGridColumn TItem="AzureBlobFile" Title="Actions">
                <Template Context="file">
                    @*<RadzenButton Text="Process" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ProcessFile(file.FileName))" />*@
                    <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click="@(args => ProcessFile(file.FileName))" Text="Process" ButtonStyle="ButtonStyle.Info" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {

    [Parameter]
    public string? RefreshComponent { get; set; }

    [Parameter]
    public EventCallback<string> RefreshComponentChanged { get; set; }

    private static string? azureStorageConnectionString;
    private static string? azureStorageContainer;
    private static string? azureStorageAccountName;
    private static string? azureStorageAccountKey;

    public ImageDetails imageDetails = new ImageDetails();

    List<AzureBlobFile> files = new List<AzureBlobFile>();
    IEnumerable<AzureBlobFile> ?enumerableFiles;

    private async Task ProcessFile(string FileName)
    {

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Processing started..." });

        string allText = "";
        string visionEndpoint = configuration["AzureVsionConfig:AzureAIVisionEndpoint"];
        string OpenAIKeyCredential = configuration["AzureVsionConfig:AzureAIVisionKeyCredential"];

        // Generate a account SAS for the blob file
        var sasKey = CreateServiceSASBlob(FileName).Result;
        var uri = "https://" + azureStorageAccountName + ".blob.core.windows.net/" + azureStorageContainer + "/" + FileName + "?" + sasKey;

        // Create an Image Analysis client.
        ImageAnalysisClient client = new ImageAnalysisClient(new Uri(visionEndpoint), new AzureKeyCredential(OpenAIKeyCredential));
        // Notify the user of the submission
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "File submitted for processing..." });
        // Submit the image to the client - Vision Endpoint
        ImageAnalysisResult result = await client.AnalyzeAsync(new Uri(uri), VisualFeatures.Read);
        ImageAnalysisResult resulttags = await client.AnalyzeAsync(new Uri(uri), VisualFeatures.Tags);

        foreach (var line in result.Read.Blocks.SelectMany(block => block.Lines))
        {
            allText += line.Text + " ";
        }

        imageDetails.Text = allText;
        imageDetails.Width = result.Metadata.Width;
        imageDetails.Height = result.Metadata.Height;
        
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Processing completed.." });

        await ShowImageDialog(uri);

        //await DialogService.OpenAsync<DialogCardPage>($"Order {orderID}",
        //       new Dictionary<string, object>() { { "OrderID", orderID } },
        //       new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

    async Task ShowImageDialog(string ImageUrl)
    {
        var result = await DialogService.OpenAsync("Image Analysis Details", ds =>
    @<RadzenStack>
        <p>Image Height: <b>@imageDetails.Height</b></p>
        <p>Image Width: <b>@imageDetails.Width</b></p>
        <p>Image Text: <b>@imageDetails.Text</b></p>
        <iframe src="@ImageUrl" width="1000" height="600" frameborder="0">></iframe>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.1rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Info" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
        , new DialogOptions { Width = "1020px" });
    }

    public async Task<string> CreateServiceSASBlob(string BlobName)
    {
        azureStorageConnectionString = configuration["AzureStorageConfig:AzureStorageConnectionString"];
        azureStorageContainer = configuration["AzureStorageConfig:AzureStorageContainer"];

        azureStorageAccountName = configuration["AzureStorageConfig:AzureStorageAccountName"];
        azureStorageAccountKey = configuration["AzureStorageConfig:AzureStorageAccountKey"];

        //  Creates a client to the BlobService using the connection string.
        var blobServiceClient = new BlobServiceClient(azureStorageConnectionString);

        //  Gets a reference to the container.
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(azureStorageContainer);

        //  Gets a reference to the blob in the container
        BlobClient blobClient = blobContainerClient.GetBlobClient(BlobName);

        //  Defines the resource being accessed and for how long the access is allowed.
        var blobSasBuilder = new BlobSasBuilder
        {
            StartsOn = DateTime.UtcNow.AddHours(-1),
            ExpiresOn = DateTime.UtcNow.AddHours(2),
            BlobContainerName = azureStorageContainer,
            BlobName = BlobName,
        };

        //  Defines the type of permission.
        blobSasBuilder.SetPermissions(BlobSasPermissions.Read);

        //  Builds an instance of StorageSharedKeyCredential
        var storageSharedKeyCredential = new StorageSharedKeyCredential(azureStorageAccountName, azureStorageAccountKey);

        //  Builds the Sas URI.
        BlobSasQueryParameters sasQueryParameters = blobSasBuilder.ToSasQueryParameters(storageSharedKeyCredential);
        
        return sasQueryParameters.ToString();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(RefreshComponent))
        {
            files.Clear();
            await GetBlobListAsync();
        }
    }

    protected async Task GetBlobListAsync()
    {
        azureStorageConnectionString = configuration["AzureStorageConfig:AzureStorageConnectionString"];
        azureStorageContainer = configuration["AzureStorageConfig:AzureStorageContainer"];

        files.Clear();
        // Nax File Size ~ 50MB
        long maxFileSize = 1024 * 1024 * 50;

        BlobContainerClient container = new BlobContainerClient(azureStorageConnectionString, azureStorageContainer);

        var resultSegment = container.GetBlobsAsync().AsPages();

        var blobs = container.GetBlobs().ToArray();

        foreach (BlobItem blobItem in blobs)
        {
            AzureBlobFile azFile = new AzureBlobFile();
            azFile.FileName = blobItem.Name;
            files.Add(azFile);
            }
        //}

         enumerableFiles = files.ToList();
    }
}
