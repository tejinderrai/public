@inject IConfiguration configuration
@inject NotificationService NotificationService
@inject DialogService DialogService

@using Azure.AI.FormRecognizer.DocumentAnalysis;
@using Azure.Storage.Sas;
@using Azure.Storage;
@using Radzen
@using Radzen.Blazor
@using Azure.AI.Vision.ImageAnalysis
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using Azure
@using Data
@using System.Text;
@using Newtonsoft.Json;

<div class="mt-2">
    <RadzenDataGrid Data="@enumerableFiles" TItem="AzureBlobFile" CssClass="thead-light" EmptyText="No files found.">
        <Columns>
            <RadzenDataGridColumn TItem="AzureBlobFile" Property="FileName" Title="File Name"  />
            <RadzenDataGridColumn TItem="AzureBlobFile" Title="Actions">
                <Template Context="file">
                    @*<RadzenButton Text="Process" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => ProcessFile(file.FileName))" />*@
                    <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click="@(args => ViewFile(file.FileName))" Text="View" ButtonStyle="ButtonStyle.Info" />
                    <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click="@(args => ProcessFile(file.FileName))" Text="Process" ButtonStyle="ButtonStyle.Info" />
                    @if (invoiceAnalaysis.InvoiceItems  != null)
                    {
                        <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click="@(args => CreateInterfaceFile())" Text="Submit" ButtonStyle="ButtonStyle.Info" />
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {

    [Parameter]
    public string? RefreshComponent { get; set; }

    [Parameter]
    public EventCallback<string> RefreshComponentChanged { get; set; }

    private static string? azureStorageConnectionString;
    private static string? azureStorageContainer;
    private static string? azureStorageAccountName;
    private static string? azureStorageAccountKey;

    private InvoiceAnalysisData invoiceAnalaysis = new InvoiceAnalysisData();
    IEnumerable<InvoiceAnalysisData> enumerableInvoiceAnalaysis;

    List<AzureBlobFile> files = new List<AzureBlobFile>();
    IEnumerable<AzureBlobFile> ?enumerableFiles;

    private async Task ViewFile(string FileName)
    {
        // Generate a account SAS for the blob file
        var sasKey = CreateServiceSASBlob(FileName).Result;
        var uri = "https://" + azureStorageAccountName + ".blob.core.windows.net/" + azureStorageContainer + "/" + FileName + "?" + sasKey;

        await ShowInvoiceSourceDialog(uri);

    }

    async Task ShowInvoiceSourceDialog(string uri)
    {
        await DialogService.OpenAsync<InvoiceViewer>("",
        new Dictionary<string, object>() { { "Uri", uri } },
        new DialogOptions() { Width = "800px", Height = "700px", Resizable = true, Draggable = true });

    }

    private async Task ProcessFile(string FileName)
    {

        string allText = "";
        string visionEndpoint = configuration["AzureVsionConfig:AzureAIVisionEndpoint"];
        string OpenAIKeyCredential = configuration["AzureVsionConfig:AzureAIVisionKeyCredential"];

        string documentIntelligenceKey = configuration["AzureDocumentIntelligenceConfig:AzureDocumentIntelligenceKey"];
        string documentIntelligenceEndpoint = configuration["AzureDocumentIntelligenceConfig:AzureDocumentIntelligenceEndpoint"];


        // Generate a account SAS for the blob file
        var sasKey = CreateServiceSASBlob(FileName).Result;
        var uri = "https://" + azureStorageAccountName + ".blob.core.windows.net/" + azureStorageContainer + "/" + FileName + "?" + sasKey;

        Uri invoiceUri = new Uri(uri);
        // NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Processing.." });

        await BusyDialog();

        AzureKeyCredential credential = new AzureKeyCredential(documentIntelligenceKey);
        DocumentAnalysisClient client = new DocumentAnalysisClient(new Uri(documentIntelligenceEndpoint), credential);
        AnalyzeDocumentOperation operation = await client.AnalyzeDocumentFromUriAsync(WaitUntil.Completed, "prebuilt-invoice", invoiceUri);
        AnalyzeResult result = operation.Value;


        for (int i = 0; i < result.Documents.Count; i++)
        {
            AnalyzedDocument document = result.Documents[i];

            if (document.Fields.TryGetValue("VendorName", out DocumentField vendorNameField))
            {
                if (vendorNameField.FieldType == DocumentFieldType.String)
                {
                    string vendorName = vendorNameField.Value.AsString();
                    invoiceAnalaysis.VendorName = vendorName;
                }
            }

            if (document.Fields.TryGetValue("VendorAddress", out DocumentField vendorAddressField))
            {
                if (vendorAddressField.FieldType == DocumentFieldType.Address)
                {
                    string vendorAddress = vendorAddressField.Content.ToString();
                    invoiceAnalaysis.VendorAddress = vendorAddress;
                }
            }

            if (document.Fields.TryGetValue("CustomerName", out DocumentField customerNameField))
            {
                if (customerNameField.FieldType == DocumentFieldType.String)
                {
                    string customerName = customerNameField.Value.AsString();
                    invoiceAnalaysis.CustomerName = customerName;
                }
            }

            if (document.Fields.TryGetValue("CustomerAddress", out DocumentField customerAddressField))
            {
                if (customerAddressField.FieldType == DocumentFieldType.Address)
                {
                    string customerAddress = customerAddressField.Content.ToString();
                    invoiceAnalaysis.CustomerAddress = customerAddress;
                }
            }


            List<InvoiceItem> invoiceItems = new List<InvoiceItem>();

            // Iterate through items
            if (document.Fields.TryGetValue("Items", out DocumentField itemsField))
            {
                if (itemsField.FieldType == DocumentFieldType.List)
                {
                    foreach (DocumentField itemField in itemsField.Value.AsList())
                    {
                        InvoiceItem item = new InvoiceItem();

                        if (itemField.FieldType == DocumentFieldType.Dictionary)
                        {
                            IReadOnlyDictionary<string, DocumentField> itemFields = itemField.Value.AsDictionary();

                            if (itemFields.TryGetValue("Description", out DocumentField itemDescriptionField))
                            {
                                if (itemDescriptionField.FieldType == DocumentFieldType.String)
                                {
                                    string itemDescription = itemDescriptionField.Value.AsString();
                                    item.ItemDescription = itemDescription;
                                }
                            }

                            if (itemFields.TryGetValue("Quantity", out DocumentField itemQuantityField))
                            {
                                if (itemQuantityField.FieldType == DocumentFieldType.String)
                                {
                                    string itemQuantity = itemQuantityField.Value.AsString();
                                }
                            }

                            if (itemFields.TryGetValue("Amount", out DocumentField itemAmountField))
                            {
                                if (itemAmountField.FieldType == DocumentFieldType.Currency)
                                {
                                    CurrencyValue itemAmount = itemAmountField.Value.AsCurrency();
                                    item.Amount = itemAmount.Amount.ToString();
                                }
                            }
                        }

                        invoiceItems.Add(item);
                    }
                }
            }

            invoiceAnalaysis.InvoiceItems = invoiceItems;

            if (document.Fields.TryGetValue("SubTotal", out DocumentField subTotalField))
            {
                if (subTotalField.FieldType == DocumentFieldType.Currency)
                {
                    CurrencyValue subTotal = subTotalField.Value.AsCurrency();
                }
            }

            if (document.Fields.TryGetValue("TotalTax", out DocumentField totalTaxField))
            {
                if (totalTaxField.FieldType == DocumentFieldType.Currency)
                {
                    CurrencyValue totalTax = totalTaxField.Value.AsCurrency();
                    invoiceAnalaysis.Tax = totalTax.Amount.ToString();
                }
            }

            if (document.Fields.TryGetValue("InvoiceTotal", out DocumentField invoiceTotalField))
            {
                if (invoiceTotalField.FieldType == DocumentFieldType.Currency)
                {
                    CurrencyValue invoiceTotal = invoiceTotalField.Value.AsCurrency();
                    invoiceAnalaysis.InvoiceTotal = invoiceTotal.Amount.ToString();
                }
            }
        }

        DialogService.Close();

        // NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Processing completed.." });
        await ShowInvoiceDialog();


        //await DialogService.OpenAsync<DialogCardPage>($"Order {orderID}",
        //       new Dictionary<string, object>() { { "OrderID", orderID } },
        //       new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });
    }

   


    // Busy dialog from markup
    Task BusyDialog()
    {
        DialogService.OpenAsync("Processing Invoice, please wait...", ds =>
        @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
        <div class="spinner-border alert-primary" />
            <RadzenText TextStyle="TextStyle.H6">Processing please wait...</RadzenText>
        </RadzenStack>
    , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
        return Task.CompletedTask;
    }


    async Task ShowInvoiceDialog()
    {
        var result = await DialogService.OpenAsync("Invoice Details", ds =>
        @<RadzenStack>
            <p>Vendor Name: <b>@invoiceAnalaysis.VendorName</b></p>
            <p>Vendor Address: <b>@invoiceAnalaysis.VendorAddress</b></p>
            <p>Customer Name: <b>@invoiceAnalaysis.CustomerName</b></p>
            <p>Customer Address: <b>@invoiceAnalaysis.CustomerAddress</b></p>
            <table>
                <tr>
                    <th>Description</th>
                    <th>Amount</th>
                </tr>
                @foreach (InvoiceItem item in invoiceAnalaysis.InvoiceItems)
                {
                    <tr>
                        <td>@item.ItemDescription</td>
                        <td>@item.Amount</td>
                    </tr>
                }
            </table>
            <p>Tax: <b>@invoiceAnalaysis.Tax</b></p>
            <p>Total Amount: <b>@invoiceAnalaysis.InvoiceTotal</b></p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.1rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Vertical">
                        <RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Info" />
                    </RadzenStack>
                </RadzenStack>
        </RadzenStack>
        , new DialogOptions { Width = "800px" });
    }

    async Task CreateInterfaceFile()
      {
        azureStorageConnectionString = configuration["AzureStorageConfig:AzureStorageConnectionString"];
        azureStorageContainer = configuration["AzureStorageConfig:AzureStorageInvoiceProcessedContainer"];

        BlobContainerClient container = new BlobContainerClient(azureStorageConnectionString, azureStorageContainer);
        Guid fileId = Guid.NewGuid();
        string file = fileId.ToString();

        string fileContents = JsonConvert.SerializeObject(invoiceAnalaysis);

        try
        {
            byte[] byteArray = Encoding.UTF8.GetBytes(fileContents);
            BlobClient blob = container.GetBlobClient(file);
            // Upload the JSON content to the blob
            using (MemoryStream stream = new MemoryStream(byteArray))
            {
                await blob.UploadAsync(stream, true);
            }


        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Error accessing storage." });
        }
        finally
        {
            // Clean up after the test when we're finished
        }

        // status = $"Finished loading {file.Size/1024/1024} MB from {file.Name
        //status = "File uploaded.";
   
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Interface file created." });

    }

    //async Task ShowInvoiceSourceDialog(string uri)
    //{
    //    var result = await DialogService.OpenAsync("Source Invoice", ds =>
    //@<RadzenStack>
    //    //<iframe src="@uri" title=""></iframe>
    //    <embed type="image/jpg" src="pic_trulli.jpg" width="300" height="200">
    //    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.1rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
    //        <RadzenStack Orientation="Orientation.Vertical">
    //            <RadzenButton Text="Close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Info" />
    //        </RadzenStack>
    //    </RadzenStack>
    //</RadzenStack>
    //, new DialogOptions { Width = "800px" });
    //}



    public async Task<string> CreateServiceSASBlob(string BlobName)
    {
        azureStorageConnectionString = configuration["AzureStorageConfig:AzureStorageConnectionString"];
        azureStorageContainer = configuration["AzureStorageConfig:AzureStorageInvoiceContainer"];

        azureStorageAccountName = configuration["AzureStorageConfig:AzureStorageAccountName"];
        azureStorageAccountKey = configuration["AzureStorageConfig:AzureStorageAccountKey"];

        //  Creates a client to the BlobService using the connection string.
        var blobServiceClient = new BlobServiceClient(azureStorageConnectionString);

        //  Gets a reference to the container.
        var blobContainerClient = blobServiceClient.GetBlobContainerClient(azureStorageContainer);

        //  Gets a reference to the blob in the container
        BlobClient blobClient = blobContainerClient.GetBlobClient(BlobName);

        //  Defines the resource being accessed and for how long the access is allowed.
        var blobSasBuilder = new BlobSasBuilder
        {
            StartsOn = DateTime.UtcNow.AddHours(-1),
            ExpiresOn = DateTime.UtcNow.AddHours(2),
            BlobContainerName = azureStorageContainer,
            BlobName = BlobName,
        };

        //  Defines the type of permission.
        blobSasBuilder.SetPermissions(BlobSasPermissions.Read);

        //  Builds an instance of StorageSharedKeyCredential
        var storageSharedKeyCredential = new StorageSharedKeyCredential(azureStorageAccountName, azureStorageAccountKey);

        //  Builds the Sas URI.
        BlobSasQueryParameters sasQueryParameters = blobSasBuilder.ToSasQueryParameters(storageSharedKeyCredential);
        
        return sasQueryParameters.ToString();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(RefreshComponent))
        {
            files.Clear();
            await GetBlobListAsync();
        }
    }

    protected async Task GetBlobListAsync()
    {
        azureStorageConnectionString = configuration["AzureStorageConfig:AzureStorageConnectionString"];
        azureStorageContainer = configuration["AzureStorageConfig:AzureStorageInvoiceContainer"];

        files.Clear();
        // Nax File Size ~ 50MB
        long maxFileSize = 1024 * 1024 * 50;

        BlobContainerClient container = new BlobContainerClient(azureStorageConnectionString, azureStorageContainer);

        var resultSegment = container.GetBlobsAsync().AsPages();

        var blobs = container.GetBlobs().ToArray();

        foreach (BlobItem blobItem in blobs)
        {
            AzureBlobFile azFile = new AzureBlobFile();
            azFile.FileName = blobItem.Name;
            files.Add(azFile);
            }
        //}

         enumerableFiles = files.ToList();
    }
}
